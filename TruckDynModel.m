% This function used incoming state and controller data to compute and
% output the rates of change of the state vector for integration by
% MATLAB's ODE solver.
% The function arguments are...
% Time - A scalar containing the current simulation time.
% StateVec - A column vector containing the states of the truck-trailer
% system. These states include (in order from top-to-bottom): The truck's
% CG x and y positions in the global frame, the truck's angle, the truck's
% forward velocity measured in its local frame, the trailer angle relative
% to the truck, and the angle and angular velocity of the truck's front
% wheels.
% Control - A class object containing control inputs including the truck's
% thrust force and the torque applied to the truck's steering wheel.
% The remaining arguments are class objects containing global, truck, and
% trailer parameters.
% The function outputs are the rate of the change of the state vector and
% updated truck and trailer class objects for saving results.

function [StateDerivVec,Truck,Trailer] =...
    TruckDynModel(Time,StateVec,Control,Global,Truck,Trailer)

% Extract input information from the control class object
Truck.WheelTorque = Control.WheelTorque;
Truck.ThrustForce = Control.ThrustForce;

% Extract states information from the state vector
Truck.CG_PosVec = StateVec(1:2);
Truck.Angle = StateVec(3);
Truck.LongVel = StateVec(4);
Trailer.AngleRel2Truck = StateVec(5);
Truck.WheelAngle = StateVec(6);
Truck.WheelAngVel = StateVec(7);

% Compute kinematic variables of the truck and trailer based on known
% truck states.
Truck.LatVel =...
    (Truck.CG2RearLength*Truck.LongVel*sin(Truck.WheelAngle))/...
    (cos(Truck.WheelAngle)*(Truck.CG2FrontLength + Truck.CG2RearLength));
Truck.AngVel =...
    (Truck.LongVel*sin(Truck.WheelAngle))/(cos(Truck.WheelAngle)*...
    (Truck.CG2FrontLength + Truck.CG2RearLength));
Trailer.Angle = Truck.Angle + Trailer.AngleRel2Truck;
Trailer.AngVel =...
    -(Truck.LongVel*(Trailer.Pivot2RearLength*sin(Truck.WheelAngle) +...
    Truck.CG2FrontLength*cos(Truck.WheelAngle)*...
    sin(Trailer.AngleRel2Truck) + Truck.CG2RearLength*...
    cos(Truck.WheelAngle)*sin(Trailer.AngleRel2Truck)))/...
    (Trailer.Pivot2RearLength*cos(Truck.WheelAngle)*...
    (Truck.CG2FrontLength + Truck.CG2RearLength));
Trailer.LongVel =...
    Truck.LongVel +...
    Trailer.Pivot2CG_Length*Truck.AngVel*sin(Trailer.AngleRel2Truck) +...
    Trailer.Pivot2CG_Length*Trailer.AngVel*sin(Trailer.AngleRel2Truck);
Trailer.LatVel =...
    Truck.LatVel -...
    Truck.AngVel*(Truck.CG2RearLength +...
    Trailer.Pivot2CG_Length*cos(Trailer.AngleRel2Truck)) -...
    Trailer.Pivot2CG_Length*Trailer.AngVel*cos(Trailer.AngleRel2Truck);

% Compile truck and trailer velocities in to vectors.
Truck.VelVec = [
    Truck.LongVel;
    Truck.LatVel];
Trailer.VelVec = [
    Trailer.LongVel;
    Trailer.LatVel];

% Solve truck-trailer kinetics problem by using the analytical expressions
% derived symbolically to compute the wheel lateral forces and truck
% forward acceleration.
[Truck.LongAcc,...
    Truck.FrontLatForce,Truck.RearLatForce,Trailer.RearLatForce] =...
    TruckKinetics(Global,Truck,Trailer);

% Solve steering wheel kinetics problem. The following components include:
% Applied steering wheel torque...
% Steering wheel linear stiffness...
% Restoring torque resulting from caster angle...
% Steering wheen linear damping...
% Artificial force to prevent wheel rotation past max desired angle.
Truck.WheelAngAcc = (1/Truck.WheelMOI)*(...  
    Truck.WheelGearRatio*Truck.WheelTorque -...
    Truck.WheelStiffCoeff*Truck.WheelAngle -...
    (Truck.FrontLatForce*cos(Truck.WheelAngle))*Truck.WheelOffset -...
    Truck.WheelDampCoeff*Truck.WheelAngVel -...
    Truck.WheelStopStiff*...
    ((0.5*tanh(Truck.WheelAngle*180/pi - Truck.MaxWheelAngle) + 0.5) +...
    (-0.5*tanh(Truck.WheelAngle*180/pi + Truck.MaxWheelAngle) + 0.5)));

% Define rotation and transformation matrices of the truck and trailer.
Truck.RotMat = [
    cos(Truck.Angle) -sin(Truck.Angle);
    sin(Truck.Angle) cos(Truck.Angle)];
Trailer.RotMat = [
    cos(Trailer.Angle) -sin(Trailer.Angle);
    sin(Trailer.Angle) cos(Trailer.Angle)];
Truck.TransMat_FW = Truck.RotMat';
Truck.TransMat_BW = Truck.TransMat_FW';

% Compute position vectors relevant to the truck and trailer for plotting
% purposes.
Truck.RearPosVec =...
    Truck.CG_PosVec + Truck.RotMat*[-Truck.CG2RearLength 0]';
Trailer.CG_PosVec =...
    Truck.CG_PosVec +...
    Truck.RotMat*[-Truck.CG2RearLength 0]' +...
    Trailer.RotMat*[-Trailer.Pivot2CG_Length 0]';
Trailer.RearPosVec =...
    Truck.CG_PosVec +...
    Truck.RotMat*[-Truck.CG2RearLength 0]' +...
    Trailer.RotMat*[-Trailer.Pivot2RearLength 0]';

% Compile the state dervative vector.
StateDerivVec = [
    Truck.TransMat_BW*Truck.VelVec;
    Truck.AngVel;
    Truck.LongAcc;
    Trailer.AngVel;
    Truck.WheelAngVel;
    Truck.WheelAngAcc];

% Display simulation time for tracking progress
disp(Time);